import asyncio
import aiohttp
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
import re

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
TOKEN = "8050530823:AAFKuT-0BbVsPw9mR1JoTVxv-zSYhr46FGY"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=TOKEN)
dp = Dispatcher()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —è–∑—ã–∫–∞ —Ç–µ–∫—Å—Ç–∞
def detect_language(text):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –≤–µ—Ä–æ—è—Ç–Ω—ã–π —è–∑—ã–∫ —Ç–µ–∫—Å—Ç–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–º —Å–∏–º–≤–æ–ª–∞–º"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–∏—Ç–∞–π—Å–∫–∏—Ö –∏–µ—Ä–æ–≥–ª–∏—Ñ–æ–≤
    if re.search(r'[\u4e00-\u9fff]', text):
        return 'zh'

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
    if re.search(r'[–∞-—è–ê-–Ø—ë–Å]', text):
        return 'ru'

    # –ï—Å–ª–∏ –Ω–µ –∫–∏—Ä–∏–ª–ª–∏—Ü–∞ –∏ –Ω–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã, —Å—á–∏—Ç–∞–µ–º —á—Ç–æ —ç—Ç–æ –¥—Ä—É–≥–æ–π —è–∑—ã–∫
    return 'other'


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def start_command(message: types.Message):
    await message.answer(
        f"‰Ω†Â•Ω, {message.from_user.first_name}!\n"
        "–Ø —É–º–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫:\n"
        "- –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º - –ø–µ—Ä–µ–≤–µ–¥—É –Ω–∞ –∫–∏—Ç–∞–π—Å–∫–∏–π\n"
        "- –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –Ω–∞ –∫–∏—Ç–∞–π—Å–∫–æ–º - –ø–µ—Ä–µ–≤–µ–¥—É –Ω–∞ —Ä—É—Å—Å–∫–∏–π\n"
        "- –¢–µ–∫—Å—Ç –Ω–∞ –¥—Ä—É–≥–∏—Ö —è–∑—ã–∫–∞—Ö –±—É–¥—É –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å –Ω–∞ —Ä—É—Å—Å–∫–∏–π\n\n"
        "<b>–ü—Ä–æ—Å—Ç–æ –≤—ã–¥–µ–ª–∏—Ç–µ –∏ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –Ω—É–∂–Ω—ã–π —Ç–µ–∫—Å—Ç!</b>",
        parse_mode="HTML"
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message()
async def translate_message(message: types.Message):
    if message.text.startswith('/'):
        return

    try:
        text = message.text
        lang = detect_language(text)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞
        if lang == 'zh':  # –ï—Å–ª–∏ –∫–∏—Ç–∞–π—Å–∫–∏–π - –ø–µ—Ä–µ–≤–æ–¥–∏–º –Ω–∞ —Ä—É—Å—Å–∫–∏–π
            source = 'zh-CN'
            target = 'ru'
            target_name = "—Ä—É—Å—Å–∫–∏–π"
        else:  # –õ—é–±–æ–π –¥—Ä—É–≥–æ–π —Ç–µ–∫—Å—Ç –ø–µ—Ä–µ–≤–æ–¥–∏–º –Ω–∞ –∫–∏—Ç–∞–π—Å–∫–∏–π
            source = 'auto'
            target = 'zh-CN'
            target_name = "–∫–∏—Ç–∞–π—Å–∫–∏–π"

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º Google Translate API
        async with aiohttp.ClientSession() as session:
            async with session.get(
                    "https://translate.googleapis.com/translate_a/single",
                    params={
                        "client": "gtx",
                        "sl": source,
                        "tl": target,
                        "dt": "t",
                        "q": text
                    }
            ) as response:
                data = await response.json()
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–∑ –æ—Ç–≤–µ—Ç–∞
                translation = ''.join([part[0] for part in data[0]])

                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
                response_text = (
                    f"üî§ <b>–ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç</b>:\n"
                    f"<code>{text}</code>\n\n"
                    f"üåç <b>–ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ {target_name}</b>:\n"
                    f"<code>{translation}</code>\n\n"
                    f"üìã –ü—Ä–æ—Å—Ç–æ –≤—ã–¥–µ–ª–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ç–µ–∫—Å—Ç –∏ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ!"
                )

                await message.answer(response_text, parse_mode="HTML")

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)


if __name__ == '__main__':
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –ø–µ—Ä–µ–≤–æ–¥—É...")
    asyncio.run(main())